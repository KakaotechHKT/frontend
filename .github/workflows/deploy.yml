name: Deploy Next.js with Docker

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # environment 설정은 필요 시 사용
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    env:
      IMAGE_NAME: ${{ vars.IMAGE_NAME }}
      CONTAINER_NAME: "frontend-container"

    steps:
      # 1) 소스 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2) Docker Buildx 세팅
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3) Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4) Docker 이미지 빌드 & 푸시
      - name: Build and Push Docker Image
        run: |
          echo "🔹 Docker 이미지 빌드: $IMAGE_NAME"

          docker build -t "$IMAGE_NAME" \
            --build-arg NEXT_PUBLIC_KAKAO_NATIVE="${{ secrets.NEXT_PUBLIC_KAKAO_NATIVE }}" \
            --build-arg NEXT_PUBLIC_KAKAO_REST_API="${{ secrets.NEXT_PUBLIC_KAKAO_REST_API }}" \
            --build-arg NEXT_PUBLIC_KAKAO_JAVASCRIPT_API="${{ secrets.NEXT_PUBLIC_KAKAO_JAVASCRIPT_API }}" \
            --build-arg NEXT_PUBLIC_KAKAO_ADMIN_API="${{ secrets.NEXT_PUBLIC_KAKAO_ADMIN_API }}" \
            --build-arg NEXT_PUBLIC_API_SERVER="${{ secrets.NEXT_PUBLIC_API_SERVER }}" \
            --build-arg NEXT_PUBLIC_AI_SERVER="${{ secrets.NEXT_PUBLIC_AI_SERVER }}" \
            .

          docker push "$IMAGE_NAME"

      # 5) SSH 키 저장
      - name: Save SSH Key (PEM)
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      # 6) EC2에 배포
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ secrets.SERVER_IP }} "bash -s" <<EOF
            echo "🔹 EC2 접속 성공. Docker 컨테이너 배포 시작..."
            echo "🔹 사용 중인 Docker 이미지: ${IMAGE_NAME}"

            echo "🔹 Docker Hub 로그인"
            docker login -u '${{ secrets.DOCKER_USERNAME }}' -p '${{ secrets.DOCKER_PASSWORD }}'

            echo "🔹 기존 컨테이너 중지 및 삭제..."
            if [ "\$(docker ps -q -f name=${CONTAINER_NAME})" ]; then
              docker stop ${CONTAINER_NAME}
              docker rm ${CONTAINER_NAME}
            else
              echo "⚠ 기존 컨테이너 없음"
            fi

            docker pull "${IMAGE_NAME}"

            docker run -d --name ${CONTAINER_NAME} -p 3000:3000 \
              --restart unless-stopped \
              "${IMAGE_NAME}"
          EOF