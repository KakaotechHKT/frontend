name: Build and Test (Docker)

on:
  pull_request:
    branches:
      - main
      - dev

jobs:
  build-test:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: "frontend-test:latest"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          echo "Docker 이미지 빌드: $IMAGE_NAME"

          docker build -t "$IMAGE_NAME" \
            --build-arg NEXT_PUBLIC_KAKAO_NATIVE="${{ secrets.NEXT_PUBLIC_KAKAO_NATIVE }}" \
            --build-arg NEXT_PUBLIC_KAKAO_REST_API="${{ secrets.NEXT_PUBLIC_KAKAO_REST_API }}" \
            --build-arg NEXT_PUBLIC_KAKAO_JAVASCRIPT_API="${{ secrets.NEXT_PUBLIC_KAKAO_JAVASCRIPT_API }}" \
            --build-arg NEXT_PUBLIC_KAKAO_ADMIN_API="${{ secrets.NEXT_PUBLIC_KAKAO_ADMIN_API }}" \
            --build-arg NEXT_PUBLIC_API_SERVER="${{ secrets.NEXT_PUBLIC_API_SERVER }}" \
            --build-arg NEXT_PUBLIC_AI_SERVER="${{ secrets.NEXT_PUBLIC_AI_SERVER }}" \
            .

      - name: Run Container for Testing
        run: |
          echo "Docker 컨테이너 실행 및 테스트"

          docker run -d --name frontend-test-container -p 3000:3000 "$IMAGE_NAME"

          # 컨테이너가 정상적으로 실행되는지 확인
          sleep 10
          docker ps -a

          # 로그 출력 (디버깅용)
          docker logs frontend-test-container

      - name: Cleanup
        run: |
          echo "Docker 컨테이너 및 이미지 정리"
          docker stop frontend-test-container
          docker rm frontend-test-container
          docker rmi "$IMAGE_NAME"